diff --git a/sound/soc/codecs/wm8960.c b/sound/soc/codecs/wm8960.c
index 956c5d0..2d671e5 100644
--- a/sound/soc/codecs/wm8960.c
+++ b/sound/soc/codecs/wm8960.c
@@ -408,33 +408,17 @@ SND_SOC_DAPM_PGA("OUT3 VMID", WM8960_POWER2, 1, 0, NULL, 0),
 };
 
 static const struct snd_soc_dapm_route audio_paths[] = {
-	{ "Left Boost Mixer", "LINPUT1 Switch", "LINPUT1" },
-	{ "Left Boost Mixer", "LINPUT2 Switch", "LINPUT2" },
-	{ "Left Boost Mixer", "LINPUT3 Switch", "LINPUT3" },
+	{ "Left Boost Mixer", "LINPUT1 Switch", "LINPUT1" }, /* 打通LMN1开关. */
+	{ "Left Input Mixer", "Boost Switch", "Left Boost Mixer" }, /* 打通LMIC2B开关 */
+	{ "Left Input Mixer", "Boost Switch", "LINPUT1" },  /* 关联LINPUT1 */
+	{ "Left ADC", NULL, "Left Input Mixer" }, /* 做声道DAC使能. */
 
-	{ "Left Input Mixer", "Boost Switch", "Left Boost Mixer" },
-	{ "Left Input Mixer", "Boost Switch", "LINPUT1" },  /* Really Boost Switch */
-	{ "Left Input Mixer", NULL, "LINPUT2" },
-	{ "Left Input Mixer", NULL, "LINPUT3" },
-
-	{ "Right Boost Mixer", "RINPUT1 Switch", "RINPUT1" },
-	{ "Right Boost Mixer", "RINPUT2 Switch", "RINPUT2" },
-	{ "Right Boost Mixer", "RINPUT3 Switch", "RINPUT3" },
-
-	{ "Right Input Mixer", "Boost Switch", "Right Boost Mixer" },
-	{ "Right Input Mixer", "Boost Switch", "RINPUT1" },  /* Really Boost Switch */
-	{ "Right Input Mixer", NULL, "RINPUT2" },
-	{ "Right Input Mixer", NULL, "RINPUT3" },
-
-	{ "Left ADC", NULL, "Left Input Mixer" },
-	{ "Right ADC", NULL, "Right Input Mixer" },
-
-	{ "Left Output Mixer", "LINPUT3 Switch", "LINPUT3" },
-	{ "Left Output Mixer", "Boost Bypass Switch", "Left Boost Mixer" },
+	/* { "Left Output Mixer", "Boost Bypass Switch", "Left Boost Mixer" }, */
+	/* { "Left Output Mixer", "<- LD2LO", "Left DAC" }, <= 等效 */
 	{ "Left Output Mixer", "PCM Playback Switch", "Left DAC" },
-
-	{ "Right Output Mixer", "RINPUT3 Switch", "RINPUT3" },
-	{ "Right Output Mixer", "Boost Bypass Switch", "Right Boost Mixer" },
+	
+	/* { "Right Output Mixer", "Boost Bypass Switch", "Right Boost Mixer" }, */
+	/* { "Right Output Mixer", "<- RD2RO", "Left DAC" }, <= 等效 */
 	{ "Right Output Mixer", "PCM Playback Switch", "Right DAC" },
 
 	{ "LOUT1 PGA", NULL, "Left Output Mixer" },
@@ -451,23 +435,16 @@ static const struct snd_soc_dapm_route audio_paths[] = {
 
 	{ "SPK_LN", NULL, "Left Speaker Output" },
 	{ "SPK_LP", NULL, "Left Speaker Output" },
-	{ "SPK_RN", NULL, "Right Speaker Output" },
-	{ "SPK_RP", NULL, "Right Speaker Output" },
 };
 
 static const struct snd_soc_dapm_route audio_paths_out3[] = {
 	{ "Mono Output Mixer", "Left Switch", "Left Output Mixer" },
 	{ "Mono Output Mixer", "Right Switch", "Right Output Mixer" },
-
-	{ "OUT3", NULL, "Mono Output Mixer", }
 };
 
 static const struct snd_soc_dapm_route audio_paths_capless[] = {
 	{ "HP_L", NULL, "OUT3 VMID" },
 	{ "HP_R", NULL, "OUT3 VMID" },
-
-	{ "OUT3 VMID", NULL, "Left Output Mixer" },
-	{ "OUT3 VMID", NULL, "Right Output Mixer" },
 };
 
 static int wm8960_add_widgets(struct snd_soc_codec *codec)
@@ -1197,9 +1174,12 @@ static int wm8960_set_pll(struct snd_soc_codec *codec,
 	snd_soc_write(codec, WM8960_PLL1, reg);
 
 	/* Turn it on */
+	
+	/* 打开PLL */
 	snd_soc_update_bits(codec, WM8960_POWER2, 0x1, 0x1);
 	msleep(250);
 	snd_soc_update_bits(codec, WM8960_CLOCK1, 0x1, 0x1);
+	
 
 	return 0;
 }
diff --git a/sound/soc/fsl/imx-wm8960.c b/sound/soc/fsl/imx-wm8960.c
index 8dbf997..f200bbe 100644
--- a/sound/soc/fsl/imx-wm8960.c
+++ b/sound/soc/fsl/imx-wm8960.c
@@ -24,7 +24,7 @@
 #include <linux/pinctrl/consumer.h>
 #include <linux/mfd/syscon.h>
 #include "../codecs/wm8960.h"
-#include "fsl_sai.h"
+#include "imx-audmux.h"
 
 struct imx_wm8960_data {
 	struct snd_soc_card card;
@@ -299,13 +299,6 @@ static int imx_hifi_startup(struct snd_pcm_substream *substream)
 	struct fsl_sai *sai = dev_get_drvdata(cpu_dai->dev);
 	int ret = 0;
 
-	data->is_stream_opened[tx] = true;
-	if (data->is_stream_opened[tx] != sai->is_stream_opened[tx] ||
-	    data->is_stream_opened[!tx] != sai->is_stream_opened[!tx]) {
-		data->is_stream_opened[tx] = false;
-		return -EBUSY;
-	}
-
 	if (!data->is_codec_master) {
 		ret = snd_pcm_hw_constraint_list(substream->runtime, 0,
 				SNDRV_PCM_HW_PARAM_RATE, &imx_wm8960_rate_constraints);
@@ -359,10 +352,13 @@ static int imx_wm8960_late_probe(struct snd_soc_card *card)
 	snd_soc_update_bits(codec, WM8960_ADDCTL4, 7<<4, 3<<4);
 
 	/* Enable headphone jack detect */
+
+	/*
 	snd_soc_update_bits(codec, WM8960_ADDCTL2, 1<<6, 1<<6);
 	snd_soc_update_bits(codec, WM8960_ADDCTL2, 1<<5, data->hp_det[1]<<5);
 	snd_soc_update_bits(codec, WM8960_ADDCTL4, 3<<2, data->hp_det[0]<<2);
 	snd_soc_update_bits(codec, WM8960_ADDCTL1, 3, 3);
+	*/
 
 	return 0;
 }
@@ -453,70 +449,130 @@ static int of_parse_gpr(struct platform_device *pdev,
 
 static int imx_wm8960_probe(struct platform_device *pdev)
 {
-	struct device_node *cpu_np, *codec_np = NULL;
-	struct platform_device *cpu_pdev;
-	struct imx_priv *priv = &card_priv;
-	struct i2c_client *codec_dev;
-	struct imx_wm8960_data *data;
-	struct platform_device *asrc_pdev = NULL;
-	struct device_node *asrc_np;
-	u32 width;
+        struct device_node *np = pdev->dev.of_node;
+    	struct device_node *cpu_np, *codec_np = NULL;
+    	struct device_node *gpr_np ;
+    	struct platform_device *cpu_pdev;
+   	struct imx_priv *priv = &card_priv;
+    	struct i2c_client *codec_dev;
+    	struct imx_wm8960_data *data;
+    	struct platform_device *asrc_pdev = NULL;
+    	struct device_node *asrc_np;
+    	u32 width;
+    	int int_port, ext_port ;
 	int ret;
 
 	priv->pdev = pdev;
 
-	cpu_np = of_parse_phandle(pdev->dev.of_node, "cpu-dai", 0);
-	if (!cpu_np) {
+	ret = of_property_read_u32(np, "mux-int-port", &int_port);
+	if (ret)
+	{
+		dev_err(&pdev->dev, "mux-int-port missing or invalid\n");
+		return ret;
+	}
+	ret = of_property_read_u32(np, "mux-ext-port", &ext_port);
+	if (ret)
+	{
+		dev_err(&pdev->dev, "mux-ext-port missing or invalid\n");
+		return ret;
+	}
+
+	/*
+	 * The port numbering in the hardware manual starts at 1, while
+	 * the audmux API expects it starts at 0.
+	 */
+	int_port--;
+	ext_port--;
+	ret = imx_audmux_v2_configure_port(int_port,
+									   IMX_AUDMUX_V2_PTCR_SYN |
+									   IMX_AUDMUX_V2_PTCR_TFSEL(ext_port) |
+									   IMX_AUDMUX_V2_PTCR_TCSEL(ext_port) |
+									   IMX_AUDMUX_V2_PTCR_TFSDIR |
+									   IMX_AUDMUX_V2_PTCR_TCLKDIR,
+									   IMX_AUDMUX_V2_PDCR_RXDSEL(ext_port));
+	if (ret)
+	{
+		dev_err(&pdev->dev, "audmux internal port setup failed\n");
+		return ret;
+	}
+	imx_audmux_v2_configure_port(ext_port,
+								 IMX_AUDMUX_V2_PTCR_SYN,
+								 IMX_AUDMUX_V2_PDCR_RXDSEL(int_port));
+	if (ret)
+	{
+		dev_err(&pdev->dev, "audmux external port setup failed\n");
+		return ret;
+	}
+
+	cpu_np = of_parse_phandle(np, "cpu-dai", 0);
+	if (!cpu_np)
+	{
 		dev_err(&pdev->dev, "cpu dai phandle missing or invalid\n");
 		ret = -EINVAL;
 		goto fail;
 	}
 
-	codec_np = of_parse_phandle(pdev->dev.of_node, "audio-codec", 0);
-	if (!codec_np) {
+	codec_np = of_parse_phandle(np, "audio-codec", 0);
+	if (!codec_np)
+	{
 		dev_err(&pdev->dev, "phandle missing or invalid\n");
 		ret = -EINVAL;
 		goto fail;
 	}
 
 	cpu_pdev = of_find_device_by_node(cpu_np);
-	if (!cpu_pdev) {
-		dev_err(&pdev->dev, "failed to find SAI platform device\n");
+	if (!cpu_pdev)
+	{
+		dev_err(&pdev->dev, "failed to find SSI platform device\n");
 		ret = -EINVAL;
 		goto fail;
 	}
-
 	codec_dev = of_find_i2c_device_by_node(codec_np);
-	if (!codec_dev || !codec_dev->dev.driver) {
+	if (!codec_dev || !codec_dev->dev.driver)
+	{
 		dev_err(&pdev->dev, "failed to find codec platform device\n");
 		ret = -EINVAL;
 		goto fail;
 	}
 
 	data = devm_kzalloc(&pdev->dev, sizeof(*data), GFP_KERNEL);
-	if (!data) {
+	if (!data)
+	{
 		ret = -ENOMEM;
 		goto fail;
 	}
 
-	if (of_property_read_bool(pdev->dev.of_node, "codec-master"))
+	if (of_property_read_bool(np, "codec-master"))
 		data->is_codec_master = true;
 
 	data->codec_clk = devm_clk_get(&codec_dev->dev, "mclk");
-	if (IS_ERR(data->codec_clk)) {
+	if (IS_ERR(data->codec_clk))
+	{
 		ret = PTR_ERR(data->codec_clk);
 		dev_err(&pdev->dev, "failed to get codec clk: %d\n", ret);
 		goto fail;
 	}
 
-	ret = of_parse_gpr(pdev, data);
-	if (ret)
-		goto fail;
+	gpr_np = of_parse_phandle(np, "gpr", 0);
+	if (gpr_np)
+	{
+		data->gpr = syscon_node_to_regmap(gpr_np);
+		if (IS_ERR(data->gpr))
+		{
+			ret = PTR_ERR(data->gpr);
+			dev_err(&pdev->dev, "failed to get gpr regmap\n");
+			goto fail;
+		}
 
-	of_property_read_u32_array(pdev->dev.of_node, "hp-det", data->hp_det, 2);
+		/* set SAI2_MCLK_DIR to enable codec MCLK for imx7d */
+		regmap_update_bits(data->gpr, 4, 1 << 20, 1 << 20);
+	}
 
-	asrc_np = of_parse_phandle(pdev->dev.of_node, "asrc-controller", 0);
-	if (asrc_np) {
+	of_property_read_u32_array(np, "hp-det", data->hp_det, 2);
+
+	asrc_np = of_parse_phandle(np, "asrc-controller", 0);
+	if (asrc_np)
+	{
 		asrc_pdev = of_find_device_by_node(asrc_np);
 		priv->asrc_pdev = asrc_pdev;
 	}
