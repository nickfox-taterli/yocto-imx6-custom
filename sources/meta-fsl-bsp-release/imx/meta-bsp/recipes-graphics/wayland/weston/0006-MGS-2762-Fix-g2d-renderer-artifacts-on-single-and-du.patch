From b610bf25e7b8d86470f788c428553274a0cea235 Mon Sep 17 00:00:00 2001
From: Marouen Ghodhbane <marouen.ghodhbane@nxp.com>
Date: Wed, 29 Mar 2017 09:58:45 +0200
Subject: [PATCH 6/6] MGS-2762 : Fix g2d-renderer  artifacts on single and dual
 display

Two different bugs are fixed here:
1/ On Single Display : when putting the window (e.g weston-terminal) way to the left and moving a surface on top of it :
	==> the boundingbox.left is negative so the destrect should be clipped to zero not to rect->x1
2/ On Dual Display : when splitting the window between both screens and moving on top of the window in the second screen:
	==> This was caused by the fact that the srcRect.left was not updated inside the loop (on nrects) so it was
	    accumulated (when dstrect.left is negative) if we have more than one damaged rectangle (nrects > 1) causing to
	    break and skip blitting

Upstream-Status: Inappropriate [i.MX specific]

Date: Mar 30, 2017
Signed-off-by: Marouen Ghodhbane <marouen.ghodhbane@nxp.com>
---
 src/g2d-renderer.c | 65 +++++++++++++++++++++++++++---------------------------
 1 file changed, 33 insertions(+), 32 deletions(-)

diff --git a/src/g2d-renderer.c b/src/g2d-renderer.c
index c30aa62..ae9a0a9 100644
--- a/src/g2d-renderer.c
+++ b/src/g2d-renderer.c
@@ -540,43 +540,44 @@ repaint_region(struct weston_view *ev, struct weston_output *output, struct g2d_
 	}
 	dstWidth  = dstsurface->base.width;
 	dstHeight = dstsurface->base.height;
+	/*Calculate the destrect once for all*/
+	dstrect.left = (bb_rects[0].x1 < 0) ? 0 : bb_rects[0].x1; /*Clip dstrect.left to 0 if boundingbox.x1 is < 0 */
+	dstrect.top = (bb_rects[0].y1 < 0) ? 0 : bb_rects[0].y1; /*Clip dstrect.top to 0 if boundingbox.y1 is < 0 */
+	dstrect.right = bb_rects[0].x2;
+	dstrect.bottom = bb_rects[0].y2;
+	/*Multi display support*/
+	if(output->x > 0)
+	{
+		dstrect.left = dstrect.left - output->x;
+		dstrect.right = dstrect.right - output->x;
+	}
+	if(dstrect.left < 0)
+	{
+		srcRect.left -= dstrect.left;
+		dstrect.left = 0;
+		if(srcRect.left > ev->surface->width)
+			return;
+	}
+	if(dstrect.right > dstWidth)
+	{
+		dstrect.right = dstWidth;
+		srcRect.right = srcRect.left + dstrect.right - dstrect.left;
+		if(srcRect.right > ev->surface->width)
+			return;
+	}
+	if(dstrect.bottom > dstHeight)
+	{
+		dstrect.bottom = dstHeight;
+		srcRect.bottom = srcRect.top + dstrect.bottom - dstrect.top;
+		if(srcRect.bottom < 0)
+			return;
+	}
+
 	for (i = 0; i < nrects; i++)
 	{
 		pixman_box32_t *rect = &rects[i];
 		gctFLOAT min_x, max_x, min_y, max_y;
 
-		dstrect.left = (bb_rects[0].x1 < 0) ? rect->x1 : bb_rects[0].x1;
-		dstrect.top = (bb_rects[0].y1 < 0) ? rect->y1 : bb_rects[0].y1;
-		dstrect.right = bb_rects[0].x2;
-		dstrect.bottom = bb_rects[0].y2;
-		/*Multi display support*/
-		if(output->x > 0)
-		{
-			dstrect.left = dstrect.left - output->x;
-			dstrect.right = dstrect.right - output->x;
-		}
-		if(dstrect.left < 0)
-		{
-			srcRect.left -= dstrect.left;
-			dstrect.left = 0;
-			if(srcRect.left > ev->surface->width)
-				break;
-		}
-		if(dstrect.right > dstWidth)
-		{
-			dstrect.right = dstWidth;
-			srcRect.right = srcRect.left + dstrect.right - dstrect.left;
-			if(srcRect.right > ev->surface->width)
-				break;
-		}
-		if(dstrect.bottom > dstHeight)
-		{
-			dstrect.bottom = dstHeight;
-			srcRect.bottom = srcRect.top + dstrect.bottom - dstrect.top;
-			if(srcRect.bottom < 0)
-				break;
-		}
-
 		for (j = 0; j < nsurf; j++)
 		{
 			pixman_box32_t *surf_rect = &surf_rects[j];
-- 
2.9.3

