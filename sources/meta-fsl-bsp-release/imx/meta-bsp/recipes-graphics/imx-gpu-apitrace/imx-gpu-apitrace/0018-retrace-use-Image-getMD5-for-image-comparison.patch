From f1c0525bec534db50cb8020d9679ac2076573bb7 Mon Sep 17 00:00:00 2001
From: Adrian Negreanu <groleo@gmail.com>
Date: Wed, 29 Mar 2017 14:48:49 +0300
Subject: [PATCH 18/31] retrace: use Image::getMD5() for image comparison

---
 retrace/retrace_main.cpp | 96 +++++++++++++++++++++++++++++++++++++++++++++++-
 1 file changed, 95 insertions(+), 1 deletion(-)

diff --git a/retrace/retrace_main.cpp b/retrace/retrace_main.cpp
index ec49a16..72e0183 100644
--- a/retrace/retrace_main.cpp
+++ b/retrace/retrace_main.cpp
@@ -32,6 +32,7 @@
 #include <getopt.h>
 #ifndef _WIN32
 #include <unistd.h> // for isatty()
+#include <fcntl.h>
 #endif
 
 #include "os_binary.hpp"
@@ -60,6 +61,13 @@ static trace::CallSet snapshotFrequency;
 static unsigned snapshotInterval = 0;
 
 static unsigned dumpStateCallNo = ~0;
+static unsigned snapshotStart = 0;
+static unsigned snapshotStop = (unsigned)-1;
+static int compareImageFd = -1;
+
+
+static int checkMD5(char *md5, int framenr);
+
 
 retrace::Retracer retracer;
 
@@ -172,7 +180,13 @@ takeSnapshot(unsigned call_no) {
                 src->writeRAW(std::cout);
                 break;
             case RAW_MD5:
-                src->writeMD5(std::cout);
+                if(compareImageFd != -1) {
+                    char *md5 = src->getMD5();
+                    checkMD5(md5, snapshot_no);
+                }
+                else {
+                    src->writeMD5(std::cout);
+                }
                 break;
             default:
                 assert(0);
@@ -611,6 +625,9 @@ usage(const char *argv0) {
         "      --snapshot-format=FMT       use (PNM, RGB, or MD5; default is PNM) when writing to stdout output\n"
         "  -S, --snapshot=CALLSET  calls to snapshot (default is every frame)\n"
         "      --snapshot-interval=N    specify a frame interval when generating snaphots (default is 0)\n"
+        "      --snapshot-start=N  start snapshot from frame N\n"
+        "      --snapshot-stop=N   stop snapshot before frame N\n"
+        "      --reference-dump=FILE    use a reference dump file to compare snapshot. Only MD5 is supported now.\n"
         "  -v, --verbose           increase output verbosity\n"
         "  -D, --dump-state=CALL   dump state at specific call no\n"
         "      --dump-format=FORMAT dump state format (`json` or `ubjson`)\n"
@@ -637,6 +654,9 @@ enum {
     SINGLETHREAD_OPT,
     SNAPSHOT_INTERVAL_OPT,
     DUMP_FORMAT_OPT,
+    SNAPSHOT_STARTFRAME_OPT,
+    SNAPSHOT_STOPFRAME_OPT,
+    REFERENCE_DUMP_OPT,
 };
 
 const static char *
@@ -669,6 +689,9 @@ longOptions[] = {
     {"wait", no_argument, 0, 'w'},
     {"loop", optional_argument, 0, LOOP_OPT},
     {"singlethread", no_argument, 0, SINGLETHREAD_OPT},
+    {"snapshot-start", required_argument, 0, SNAPSHOT_STARTFRAME_OPT},
+    {"snapshot-stop", required_argument, 0, SNAPSHOT_STOPFRAME_OPT},
+    {"reference-dump", required_argument, 0, REFERENCE_DUMP_OPT},
     {0, 0, 0, 0}
 };
 
@@ -678,6 +701,63 @@ static void exceptionCallback(void)
     std::cerr << retrace::callNo << ": error: caught an unhandled exception\n";
 }
 
+static int openReferenceDump(const char *file)
+{
+    compareImageFd = open(file, O_RDONLY);
+    if (compareImageFd == -1) {
+        std::cerr << "error: failed to open the reference dump file: " << file << std::endl;
+        return -1;
+    }
+    return 0;
+}
+
+// caller to free the return md5
+static char * getRefMD5(int fd, int frame)
+{
+    char buf[33];
+    // 33 chars per line (including '\n')
+    if(lseek(fd, frame * 33, SEEK_SET) == -1) {
+        std::cerr << "Failed to seek to frame " << frame << std::endl;
+        return NULL;
+    }
+    if(read(fd, buf, 32) != 32) {
+        std::cerr << "Failed to read 32 bytes\n";
+        return NULL;
+    }
+
+    buf[32] = 0;
+
+    return strdup(buf);
+}
+
+static int checkMD5(char *md5, int framenr)
+{
+    // read line #snapshot_no
+    char *md5ref = getRefMD5(compareImageFd, framenr);
+    int pass = 0;
+    if(md5 != NULL && md5ref != NULL && strcmp(md5, md5ref) == 0)
+    {
+        // pass
+        pass = 1;
+    }
+    else
+    {
+        // fail
+        pass = 0;
+    }
+    if(!pass) {
+        std::cerr << "Mismatch found for frame " << framenr
+            << ": reference " << (md5ref?md5ref:"(null)")
+            << ", but " << (md5?md5:"(null)") << " found\n";
+        exit(1); // no more test?
+    }
+    if(md5)
+        free(md5);
+    if(md5ref)
+        free(md5ref);
+
+    return 0;
+}
 
 extern "C"
 int main(int argc, char **argv)
@@ -837,6 +917,17 @@ int main(int argc, char **argv)
 
             retrace::profilingMemoryUsage = true;
             break;
+        case SNAPSHOT_STARTFRAME_OPT:
+            snapshotStart = atoi(optarg);
+            break;
+        case SNAPSHOT_STOPFRAME_OPT:
+            snapshotStop = atoi(optarg);
+            break;
+        case REFERENCE_DUMP_OPT:
+            if (openReferenceDump(optarg)) {
+                return 1;
+            }
+            break;
         default:
             std::cerr << "error: unknown option " << opt << "\n";
             usage(argv[0]);
@@ -890,6 +981,9 @@ int main(int argc, char **argv)
     // XXX: X often hangs on XCloseDisplay
     //retrace::cleanUp();
 
+    if(compareImageFd != -1)
+        close(compareImageFd);
+
 #ifdef _WIN32
     if (mmRes == MMSYSERR_NOERROR) {
         timeEndPeriod(tc.wPeriodMin);
-- 
2.7.4

