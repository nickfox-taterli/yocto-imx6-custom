From 33f1a0293d2c16068d4da1d3c4da9004f4f6a5ef Mon Sep 17 00:00:00 2001
From: Adrian Negreanu <adrian.negreanu@nxp.com>
Date: Mon, 10 Jul 2017 22:13:44 +0300
Subject: [PATCH] dlopen: don't override symbols in Viv libs

---
 wrappers/egltrace.py | 20 +++++++++++++++++++-
 wrappers/glxtrace.py | 20 ++++++++++++++++++--
 2 files changed, 37 insertions(+), 3 deletions(-)

diff --git a/wrappers/egltrace.py b/wrappers/egltrace.py
index 9a292da..f7f03db 100644
--- a/wrappers/egltrace.py
+++ b/wrappers/egltrace.py
@@ -318,6 +318,19 @@ void * dlopen(const char *filename, int flag)
             strcmp(filename, "libGL.so") == 0 ||
             strcmp(filename, "libGL.so.1") == 0;
 
+        void *caller = __builtin_return_address(0);
+        Dl_info info;
+        if (dladdr(caller, &info)) {
+            const char *caller_module = info.dli_fname;
+            os::log("apitrace: dlopen(%s) called from %s\n", filename, caller_module);
+            if ( (strcmp(caller_module, "/usr/lib/libGAL.so") == 0)
+              || (strcmp(caller_module, "/usr/lib/libVDK.so") == 0)
+               )
+            {
+                intercept = false;
+            }
+        }
+
         if (intercept) {
             os::log("apitrace: redirecting dlopen(\"%s\", 0x%x)\n", filename, flag);
 
@@ -332,7 +345,11 @@ void * dlopen(const char *filename, int flag)
         }
     }
 
-    void *handle = _dlopen(filename, flag);
+    void *handle = _dlopen(filename, RTLD_NOW);
+    if (!handle) {
+        os::log("apitrace: warning: dlopen(%s,%x) failed %s\n", filename, flag, dlerror());
+        return handle;
+    }
 
     if (intercept) {
         // Get the file path for our shared object, and use it instead
@@ -353,6 +370,7 @@ void * dlopen(const char *filename, int flag)
         }
     }
 
+    os::log("apitrace: %p\n", handle);
     return handle;
 }
 
diff --git a/wrappers/glxtrace.py b/wrappers/glxtrace.py
index e2d0fc4..ee5097d 100644
--- a/wrappers/glxtrace.py
+++ b/wrappers/glxtrace.py
@@ -198,7 +198,11 @@ void * dlopen(const char *filename, int flag)
 {
     void *handle;
 
-    handle = _dlopen(filename, flag);
+    handle = _dlopen(filename, RTLD_NOW);
+    if (!handle) {
+        os::log("apitrace: warning: dlopen(%s,%x) failed %s\n", filename, flag, dlerror());
+        return handle;
+    }
 
     const char * libgl_filename = getenv("TRACE_LIBGL");
 
@@ -211,12 +215,24 @@ void * dlopen(const char *filename, int flag)
         if (strcmp(filename, "libGL.so") == 0 ||
             strcmp(filename, "libGL.so.1") == 0) {
 
+            void *caller = __builtin_return_address(0);
+            Dl_info info;
+            if (dladdr(caller, &info)) {
+                const char *caller_module = info.dli_fname;
+                os::log("apitrace: dlopen(%s) called from %s\n", filename, caller_module);
+                if ( (strcmp(caller_module, "/usr/lib/libGAL.so") == 0)
+                  || (strcmp(caller_module, "/usr/lib/libVDK.so") == 0)
+                   )
+                {
+                    return handle;
+                }
+            }
+
             // Use the true libGL.so handle instead of RTLD_NEXT from now on
             _libGlHandle = handle;
 
             // Get the file path for our shared object, and use it instead
             static int dummy = 0xdeedbeef;
-            Dl_info info;
             if (dladdr(&dummy, &info)) {
                 os::log("apitrace: redirecting dlopen(\"%s\", 0x%x)\n", filename, flag);
                 handle = _dlopen(info.dli_fname, flag);
-- 
2.7.4

