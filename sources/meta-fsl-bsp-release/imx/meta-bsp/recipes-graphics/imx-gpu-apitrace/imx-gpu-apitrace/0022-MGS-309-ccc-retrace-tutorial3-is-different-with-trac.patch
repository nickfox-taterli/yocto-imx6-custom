From 9131ba8b2484308ee3f5083e085ff2cf976bc4c1 Mon Sep 17 00:00:00 2001
From: Adrian Negreanu <groleo@gmail.com>
Date: Wed, 19 Apr 2017 17:58:14 +0300
Subject: [PATCH 22/31] MGS-309 [#ccc] retrace "tutorial3" is different with
 trace it.

glMultiDrawElementsEXT is implemented by calling glDrawElements.

Since apitrace traces both glMultiDrawElementsEXT and glDrawElements, this
will mess up the trace.

This patch will only trace glMultiDrawElementsEXT without the nested
glDrawElements calls.
---
 wrappers/gltrace.py |  6 ++++++
 wrappers/trace.py   | 12 ++++++++++++
 2 files changed, 18 insertions(+)

diff --git a/wrappers/gltrace.py b/wrappers/gltrace.py
index 769f2e3..6f96572 100644
--- a/wrappers/gltrace.py
+++ b/wrappers/gltrace.py
@@ -404,6 +404,7 @@ class GlTracer(Tracer):
 
     # XXX: We currently ignore the gl*Draw*ElementArray* functions
     draw_function_regex = re.compile(r'^gl([A-Z][a-z]+)*Draw(Range)?(Arrays|Elements)([A-Z][a-zA-Z]*)?$' )
+    multi_draw_function_regex = re.compile(r'^glMultiDraw(Arrays|Elements)([A-Z][a-zA-Z]*)?$' )
 
     interleaved_formats = [
          'GL_V2F',
@@ -503,6 +504,11 @@ class GlTracer(Tracer):
 
         # ... to the draw calls
         if self.draw_function_regex.match(function.name):
+            if not self.multi_draw_function_regex.match(function.name):
+                print '    if (trace::localWriter.isIgnored()) {'
+                self.invokeFunction(function)
+                print '        return;'
+                print '    }'
             print '    if (_need_user_arrays()) {'
             if 'Indirect' in function.name:
                 print r'        os::log("apitrace: warning: %s: indirect user arrays not supported\n");' % (function.name,)
diff --git a/wrappers/trace.py b/wrappers/trace.py
index cb51024..efb2fd5 100644
--- a/wrappers/trace.py
+++ b/wrappers/trace.py
@@ -35,6 +35,7 @@ import itertools
 
 import specs.stdapi as stdapi
 
+import re
 
 def getWrapperInterfaceName(interface):
     return "Wrap" + interface.expr
@@ -560,13 +561,24 @@ class Tracer:
         print
 
     def traceFunctionImplBody(self, function):
+        multi_draw_function_regex = re.compile(r'^glMultiDraw(Arrays|Elements)([A-Z][a-zA-Z]*)?$' )
         if not function.internal:
             print '    unsigned _call = trace::localWriter.beginEnter(&_%s_sig);' % (function.name,)
             for arg in function.args:
                 if not arg.output:
                     self.serializeArg(function, arg)
             print '    trace::localWriter.endEnter();'
+
+        if self.multi_draw_function_regex.match(function.name):
+            print '    trace::localWriter.beginIgnore();'
+            print '    trace::localWriter.endIgnore();'
+
         self.invokeFunction(function)
+
+        if self.multi_draw_function_regex.match(function.name):
+            print '    trace::localWriter.beginTrace();'
+            print '    trace::localWriter.endTrace();'
+
         if not function.internal:
             print '    trace::localWriter.beginLeave(_call);'
             print '    if (%s) {' % self.wasFunctionSuccessful(function)
-- 
2.7.4

